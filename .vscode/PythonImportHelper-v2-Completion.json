[
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "tree_sitter,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tree_sitter.",
        "description": "tree_sitter.",
        "detail": "tree_sitter.",
        "documentation": {}
    },
    {
        "label": "isdir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "isdir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "isdir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "isdir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "platform",
        "description": "platform",
        "isExtraImport": true,
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "platform",
        "description": "platform",
        "isExtraImport": true,
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "platform",
        "description": "platform",
        "isExtraImport": true,
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "platform",
        "description": "platform",
        "isExtraImport": true,
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "setuptools.command.build",
        "description": "setuptools.command.build",
        "isExtraImport": true,
        "detail": "setuptools.command.build",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "setuptools.command.build",
        "description": "setuptools.command.build",
        "isExtraImport": true,
        "detail": "setuptools.command.build",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "setuptools.command.build",
        "description": "setuptools.command.build",
        "isExtraImport": true,
        "detail": "setuptools.command.build",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "setuptools.command.build",
        "description": "setuptools.command.build",
        "isExtraImport": true,
        "detail": "setuptools.command.build",
        "documentation": {}
    },
    {
        "label": "bdist_wheel",
        "importPath": "wheel.bdist_wheel",
        "description": "wheel.bdist_wheel",
        "isExtraImport": true,
        "detail": "wheel.bdist_wheel",
        "documentation": {}
    },
    {
        "label": "bdist_wheel",
        "importPath": "wheel.bdist_wheel",
        "description": "wheel.bdist_wheel",
        "isExtraImport": true,
        "detail": "wheel.bdist_wheel",
        "documentation": {}
    },
    {
        "label": "bdist_wheel",
        "importPath": "wheel.bdist_wheel",
        "description": "wheel.bdist_wheel",
        "isExtraImport": true,
        "detail": "wheel.bdist_wheel",
        "documentation": {}
    },
    {
        "label": "bdist_wheel",
        "importPath": "wheel.bdist_wheel",
        "description": "wheel.bdist_wheel",
        "isExtraImport": true,
        "detail": "wheel.bdist_wheel",
        "documentation": {}
    },
    {
        "label": "run_unittest",
        "importPath": "test.test_support",
        "description": "test.test_support",
        "isExtraImport": true,
        "detail": "test.test_support",
        "documentation": {}
    },
    {
        "label": "check_syntax_error",
        "importPath": "test.test_support",
        "description": "test.test_support",
        "isExtraImport": true,
        "detail": "test.test_support",
        "documentation": {}
    },
    {
        "label": "run_unittest",
        "importPath": "test.test_support",
        "description": "test.test_support",
        "isExtraImport": true,
        "detail": "test.test_support",
        "documentation": {}
    },
    {
        "label": "check_syntax_error",
        "importPath": "test.test_support",
        "description": "test.test_support",
        "isExtraImport": true,
        "detail": "test.test_support",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "run_unittest",
        "importPath": "test.support",
        "description": "test.support",
        "isExtraImport": true,
        "detail": "test.support",
        "documentation": {}
    },
    {
        "label": "check_syntax_error",
        "importPath": "test.support",
        "description": "test.support",
        "isExtraImport": true,
        "detail": "test.support",
        "documentation": {}
    },
    {
        "label": "run_unittest",
        "importPath": "test.support",
        "description": "test.support",
        "isExtraImport": true,
        "detail": "test.support",
        "documentation": {}
    },
    {
        "label": "check_syntax_error",
        "importPath": "test.support",
        "description": "test.support",
        "isExtraImport": true,
        "detail": "test.support",
        "documentation": {}
    },
    {
        "label": "check_syntax_error",
        "importPath": "test.support",
        "description": "test.support",
        "isExtraImport": true,
        "detail": "test.support",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "test.ann_module",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "test.ann_module",
        "description": "test.ann_module",
        "detail": "test.ann_module",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ChainMap",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "test",
        "description": "test",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "ann_module2",
        "importPath": "test",
        "description": "test",
        "isExtraImport": true,
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "preprocess_code",
        "importPath": "preprocess",
        "description": "preprocess",
        "isExtraImport": true,
        "detail": "preprocess",
        "documentation": {}
    },
    {
        "label": "get_ast_structure",
        "importPath": "ast_parser",
        "description": "ast_parser",
        "isExtraImport": true,
        "detail": "ast_parser",
        "documentation": {}
    },
    {
        "label": "get_ast_structure",
        "importPath": "ast_parser",
        "description": "ast_parser",
        "isExtraImport": true,
        "detail": "ast_parser",
        "documentation": {}
    },
    {
        "label": "tokenize_code",
        "importPath": "tokenizer",
        "description": "tokenizer",
        "isExtraImport": true,
        "detail": "tokenizer",
        "documentation": {}
    },
    {
        "label": "tokenize_code",
        "importPath": "tokenizer",
        "description": "tokenizer",
        "isExtraImport": true,
        "detail": "tokenizer",
        "documentation": {}
    },
    {
        "label": "normalize_code",
        "importPath": "normalize",
        "description": "normalize",
        "isExtraImport": true,
        "detail": "normalize",
        "documentation": {}
    },
    {
        "label": "normalize_code",
        "importPath": "normalize",
        "description": "normalize",
        "isExtraImport": true,
        "detail": "normalize",
        "documentation": {}
    },
    {
        "label": "hash_code",
        "importPath": "hash_similarity",
        "description": "hash_similarity",
        "isExtraImport": true,
        "detail": "hash_similarity",
        "documentation": {}
    },
    {
        "label": "hash_code",
        "importPath": "hash_similarity",
        "description": "hash_similarity",
        "isExtraImport": true,
        "detail": "hash_similarity",
        "documentation": {}
    },
    {
        "label": "generate_cfg",
        "importPath": "cfg_generator",
        "description": "cfg_generator",
        "isExtraImport": true,
        "detail": "cfg_generator",
        "documentation": {}
    },
    {
        "label": "generate_cfg",
        "importPath": "cfg_generator",
        "description": "cfg_generator",
        "isExtraImport": true,
        "detail": "cfg_generator",
        "documentation": {}
    },
    {
        "label": "difflib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "difflib",
        "description": "difflib",
        "detail": "difflib",
        "documentation": {}
    },
    {
        "label": "SequenceMatcher",
        "importPath": "difflib",
        "description": "difflib",
        "isExtraImport": true,
        "detail": "difflib",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "compare_codes",
        "importPath": "compare",
        "description": "compare",
        "isExtraImport": true,
        "detail": "compare",
        "documentation": {}
    },
    {
        "label": "compare_codes",
        "importPath": "compare",
        "description": "compare",
        "isExtraImport": true,
        "detail": "compare",
        "documentation": {}
    },
    {
        "label": "visualize_similarity",
        "importPath": "visualizer",
        "description": "visualizer",
        "isExtraImport": true,
        "detail": "visualizer",
        "documentation": {}
    },
    {
        "label": "visualize_synthetic_similarity",
        "importPath": "visualizer",
        "description": "visualizer",
        "isExtraImport": true,
        "detail": "visualizer",
        "documentation": {}
    },
    {
        "label": "visualize_structural_similarity",
        "importPath": "visualizer",
        "description": "visualizer",
        "isExtraImport": true,
        "detail": "visualizer",
        "documentation": {}
    },
    {
        "label": "visualize_synthetic_vs_structural",
        "importPath": "visualizer",
        "description": "visualizer",
        "isExtraImport": true,
        "detail": "visualizer",
        "documentation": {}
    },
    {
        "label": "# ✅ Corrected name\r\n    visualize_behavioral_similarity",
        "importPath": "visualizer",
        "description": "visualizer",
        "isExtraImport": true,
        "detail": "visualizer",
        "documentation": {}
    },
    {
        "label": "visualize_synthetic_vs_structural_vs_behavioral",
        "importPath": "visualizer",
        "description": "visualizer",
        "isExtraImport": true,
        "detail": "visualizer",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "tokenize",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tokenize",
        "description": "tokenize",
        "detail": "tokenize",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "TestLanguage",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-c.bindings.python.tests.test_binding",
        "description": "tree-sitter-languages.tree-sitter-c.bindings.python.tests.test_binding",
        "peekOfCode": "class TestLanguage(TestCase):\n    def test_can_load_grammar(self):\n        try:\n            tree_sitter.Language(tree_sitter_c.language())\n        except Exception:\n            self.fail(\"Error loading C grammar\")",
        "detail": "tree-sitter-languages.tree-sitter-c.bindings.python.tests.test_binding",
        "documentation": {}
    },
    {
        "label": "Build",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-c.setup",
        "description": "tree-sitter-languages.tree-sitter-c.setup",
        "peekOfCode": "class Build(build):\n    def run(self):\n        if isdir(\"queries\"):\n            dest = join(self.build_lib, \"tree_sitter_c\", \"queries\")\n            self.copy_tree(\"queries\", dest)\n        super().run()\nclass BdistWheel(bdist_wheel):\n    def get_tag(self):\n        python, abi, platform = super().get_tag()\n        if python.startswith(\"cp\"):",
        "detail": "tree-sitter-languages.tree-sitter-c.setup",
        "documentation": {}
    },
    {
        "label": "BdistWheel",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-c.setup",
        "description": "tree-sitter-languages.tree-sitter-c.setup",
        "peekOfCode": "class BdistWheel(bdist_wheel):\n    def get_tag(self):\n        python, abi, platform = super().get_tag()\n        if python.startswith(\"cp\"):\n            python, abi = \"cp39\", \"abi3\"\n        return python, abi, platform\nsetup(\n    packages=find_packages(\"bindings/python\"),\n    package_dir={\"\": \"bindings/python\"},\n    package_data={",
        "detail": "tree-sitter-languages.tree-sitter-c.setup",
        "documentation": {}
    },
    {
        "label": "TestLanguage",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-cpp.bindings.python.tests.test_binding",
        "description": "tree-sitter-languages.tree-sitter-cpp.bindings.python.tests.test_binding",
        "peekOfCode": "class TestLanguage(TestCase):\n    def test_can_load_grammar(self):\n        try:\n            tree_sitter.Language(tree_sitter_cpp.language())\n        except Exception:\n            self.fail(\"Error loading C++ grammar\")",
        "detail": "tree-sitter-languages.tree-sitter-cpp.bindings.python.tests.test_binding",
        "documentation": {}
    },
    {
        "label": "Build",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-cpp.setup",
        "description": "tree-sitter-languages.tree-sitter-cpp.setup",
        "peekOfCode": "class Build(build):\n    def run(self):\n        if isdir(\"queries\"):\n            dest = join(self.build_lib, \"tree_sitter_cpp\", \"queries\")\n            self.copy_tree(\"queries\", dest)\n        super().run()\nclass BdistWheel(bdist_wheel):\n    def get_tag(self):\n        python, abi, platform = super().get_tag()\n        if python.startswith(\"cp\"):",
        "detail": "tree-sitter-languages.tree-sitter-cpp.setup",
        "documentation": {}
    },
    {
        "label": "BdistWheel",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-cpp.setup",
        "description": "tree-sitter-languages.tree-sitter-cpp.setup",
        "peekOfCode": "class BdistWheel(bdist_wheel):\n    def get_tag(self):\n        python, abi, platform = super().get_tag()\n        if python.startswith(\"cp\"):\n            python, abi = \"cp39\", \"abi3\"\n        return python, abi, platform\nsetup(\n    packages=find_packages(\"bindings/python\"),\n    package_dir={\"\": \"bindings/python\"},\n    package_data={",
        "detail": "tree-sitter-languages.tree-sitter-cpp.setup",
        "documentation": {}
    },
    {
        "label": "TestLanguage",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-java.bindings.python.tests.test_binding",
        "description": "tree-sitter-languages.tree-sitter-java.bindings.python.tests.test_binding",
        "peekOfCode": "class TestLanguage(TestCase):\n    def test_can_load_grammar(self):\n        try:\n            tree_sitter.Language(tree_sitter_java.language())\n        except Exception:\n            self.fail(\"Error loading Java grammar\")",
        "detail": "tree-sitter-languages.tree-sitter-java.bindings.python.tests.test_binding",
        "documentation": {}
    },
    {
        "label": "Build",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-java.setup",
        "description": "tree-sitter-languages.tree-sitter-java.setup",
        "peekOfCode": "class Build(build):\n    def run(self):\n        if isdir(\"queries\"):\n            dest = join(self.build_lib, \"tree_sitter_java\", \"queries\")\n            self.copy_tree(\"queries\", dest)\n        super().run()\nclass BdistWheel(bdist_wheel):\n    def get_tag(self):\n        python, abi, platform = super().get_tag()\n        if python.startswith(\"cp\"):",
        "detail": "tree-sitter-languages.tree-sitter-java.setup",
        "documentation": {}
    },
    {
        "label": "BdistWheel",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-java.setup",
        "description": "tree-sitter-languages.tree-sitter-java.setup",
        "peekOfCode": "class BdistWheel(bdist_wheel):\n    def get_tag(self):\n        python, abi, platform = super().get_tag()\n        if python.startswith(\"cp\"):\n            python, abi = \"cp39\", \"abi3\"\n        return python, abi, platform\nsetup(\n    packages=find_packages(\"bindings/python\"),\n    package_dir={\"\": \"bindings/python\"},\n    package_data={",
        "detail": "tree-sitter-languages.tree-sitter-java.setup",
        "documentation": {}
    },
    {
        "label": "TestLanguage",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.bindings.python.tests.test_binding",
        "description": "tree-sitter-languages.tree-sitter-python.bindings.python.tests.test_binding",
        "peekOfCode": "class TestLanguage(TestCase):\n    def test_can_load_grammar(self):\n        try:\n            tree_sitter.Language(tree_sitter_python.language())\n        except Exception:\n            self.fail(\"Error loading Python grammar\")",
        "detail": "tree-sitter-languages.tree-sitter-python.bindings.python.tests.test_binding",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.compound-statement-without-trailing-newline",
        "description": "tree-sitter-languages.tree-sitter-python.examples.compound-statement-without-trailing-newline",
        "peekOfCode": "class Foo:\n  def bar():\n    print \"hi\"",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.compound-statement-without-trailing-newline",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.mixed-spaces-tabs",
        "description": "tree-sitter-languages.tree-sitter-python.examples.mixed-spaces-tabs",
        "peekOfCode": "def main():\n\tprint \"hello\"\n\t# 1 tab = 8 spaces in Python 2\n        return",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.mixed-spaces-tabs",
        "documentation": {}
    },
    {
        "label": "hi",
        "kind": 2,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.multiple-newlines",
        "description": "tree-sitter-languages.tree-sitter-python.examples.multiple-newlines",
        "peekOfCode": "def hi():\n    print \"hi\"\ndef bye():\n    print \"bye\"",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.multiple-newlines",
        "documentation": {}
    },
    {
        "label": "bye",
        "kind": 2,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.multiple-newlines",
        "description": "tree-sitter-languages.tree-sitter-python.examples.multiple-newlines",
        "peekOfCode": "def bye():\n    print \"bye\"",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.multiple-newlines",
        "documentation": {}
    },
    {
        "label": "TokenTests",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar-crlf",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar-crlf",
        "peekOfCode": "class TokenTests(unittest.TestCase):\n    def testBackslash(self):\n        # Backslash means line continuation:\n        x = 1 \\\n        + 1\n        self.assertEquals(x, 2, 'backslash for line continuation')\n        # Backslash does not means continuation in comments :\\\n        x = 0\n        self.assertEquals(x, 0, 'backslash ending comment')\n    def testPlainIntegers(self):",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar-crlf",
        "documentation": {}
    },
    {
        "label": "GrammarTests",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar-crlf",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar-crlf",
        "peekOfCode": "class GrammarTests(unittest.TestCase):\n    # single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE\n    # XXX can't test in a script -- this rule is only used when interactive\n    # file_input: (NEWLINE | stmt)* ENDMARKER\n    # Being tested as this very moment this very module\n    # expr_input: testlist NEWLINE\n    # XXX Hard to test -- used only in calls to input()\n    def testEvalInput(self):\n        # testlist ENDMARKER\n        x = eval('1, 0 or 1')",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar-crlf",
        "documentation": {}
    },
    {
        "label": "test_main",
        "kind": 2,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar-crlf",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar-crlf",
        "peekOfCode": "def test_main():\n    run_unittest(TokenTests, GrammarTests)\nif __name__ == '__main__':\n    test_main()",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar-crlf",
        "documentation": {}
    },
    {
        "label": "TokenTests",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar",
        "peekOfCode": "class TokenTests(unittest.TestCase):\n    def testBackslash(self):\n        # Backslash means line continuation:\n        x = 1 \\\n        + 1\n        self.assertEquals(x, 2, 'backslash for line continuation')\n        # Backslash does not means continuation in comments :\\\n        x = 0\n        self.assertEquals(x, 0, 'backslash ending comment')\n    def testPlainIntegers(self):",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar",
        "documentation": {}
    },
    {
        "label": "GrammarTests",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar",
        "peekOfCode": "class GrammarTests(unittest.TestCase):\n    # single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE\n    # XXX can't test in a script -- this rule is only used when interactive\n    # file_input: (NEWLINE | stmt)* ENDMARKER\n    # Being tested as this very moment this very module\n    # expr_input: testlist NEWLINE\n    # XXX Hard to test -- used only in calls to input()\n    def testEvalInput(self):\n        # testlist ENDMARKER\n        x = eval('1, 0 or 1')",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar",
        "documentation": {}
    },
    {
        "label": "test_main",
        "kind": 2,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar",
        "peekOfCode": "def test_main():\n    run_unittest(TokenTests, GrammarTests)\nif __name__ == '__main__':\n    test_main()",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python2-grammar",
        "documentation": {}
    },
    {
        "label": "TokenTests",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar-crlf",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar-crlf",
        "peekOfCode": "class TokenTests(unittest.TestCase):\n    def testBackslash(self):\n        # Backslash means line continuation:\n        x = 1 \\\n        + 1\n        self.assertEquals(x, 2, 'backslash for line continuation')\n        # Backslash does not means continuation in comments :\\\n        x = 0\n        self.assertEquals(x, 0, 'backslash ending comment')\n    def testPlainIntegers(self):",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar-crlf",
        "documentation": {}
    },
    {
        "label": "GrammarTests",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar-crlf",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar-crlf",
        "peekOfCode": "class GrammarTests(unittest.TestCase):\n    # single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE\n    # XXX can't test in a script -- this rule is only used when interactive\n    # file_input: (NEWLINE | stmt)* ENDMARKER\n    # Being tested as this very moment this very module\n    # expr_input: testlist NEWLINE\n    # XXX Hard to test -- used only in calls to input()\n    def testEvalInput(self):\n        # testlist ENDMARKER\n        x = eval('1, 0 or 1')",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar-crlf",
        "documentation": {}
    },
    {
        "label": "test_main",
        "kind": 2,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar-crlf",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar-crlf",
        "peekOfCode": "def test_main():\n    run_unittest(TokenTests, GrammarTests)\nif __name__ == '__main__':\n    test_main()",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar-crlf",
        "documentation": {}
    },
    {
        "label": "TokenTests",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar",
        "peekOfCode": "class TokenTests(unittest.TestCase):\n    def testBackslash(self):\n        # Backslash means line continuation:\n        x = 1 \\\n        + 1\n        self.assertEquals(x, 2, 'backslash for line continuation')\n        # Backslash does not means continuation in comments :\\\n        x = 0\n        self.assertEquals(x, 0, 'backslash ending comment')\n    def testPlainIntegers(self):",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar",
        "documentation": {}
    },
    {
        "label": "GrammarTests",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar",
        "peekOfCode": "class GrammarTests(unittest.TestCase):\n    # single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE\n    # XXX can't test in a script -- this rule is only used when interactive\n    # file_input: (NEWLINE | stmt)* ENDMARKER\n    # Being tested as this very moment this very module\n    # expr_input: testlist NEWLINE\n    # XXX Hard to test -- used only in calls to input()\n    def testEvalInput(self):\n        # testlist ENDMARKER\n        x = eval('1, 0 or 1')",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar",
        "documentation": {}
    },
    {
        "label": "test_main",
        "kind": 2,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar",
        "peekOfCode": "def test_main():\n    run_unittest(TokenTests, GrammarTests)\nif __name__ == '__main__':\n    test_main()",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python3-grammar",
        "documentation": {}
    },
    {
        "label": "TokenTests",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "peekOfCode": "class TokenTests(unittest.TestCase):\n    def test_backslash(self):\n        # Backslash means line continuation:\n        x = 1 \\\n        + 1\n        self.assertEqual(x, 2, 'backslash for line continuation')\n        # Backslash does not means continuation in comments :\\\n        x = 0\n        self.assertEqual(x, 0, 'backslash ending comment')\n    def test_plain_integers(self):",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "documentation": {}
    },
    {
        "label": "CNS",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "peekOfCode": "class CNS:\n    def __init__(self):\n        self._dct = {}\n    def __setitem__(self, item, value):\n        self._dct[item.lower()] = value\n    def __getitem__(self, item):\n        return self._dct[item]\nclass GrammarTests(unittest.TestCase):\n    check_syntax_error = check_syntax_error\n    # single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "documentation": {}
    },
    {
        "label": "GrammarTests",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "peekOfCode": "class GrammarTests(unittest.TestCase):\n    check_syntax_error = check_syntax_error\n    # single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE\n    # XXX can't test in a script -- this rule is only used when interactive\n    # file_input: (NEWLINE | stmt)* ENDMARKER\n    # Being tested as this very moment this very module\n    # expr_input: testlist NEWLINE\n    # XXX Hard to test -- used only in calls to input()\n    def test_eval_input(self):\n        # testlist ENDMARKER",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "documentation": {}
    },
    {
        "label": "VALID_UNDERSCORE_LITERALS",
        "kind": 5,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "peekOfCode": "VALID_UNDERSCORE_LITERALS = [\n    '0_0_0',\n    '4_2',\n    '1_0000_0000',\n    '0b1001_0100',\n    '0xffff_ffff',\n    '0o5_7_7',\n    '1_00_00.5',\n    '1_00_00.5e5',\n    '1_00_00e5_1',",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "documentation": {}
    },
    {
        "label": "INVALID_UNDERSCORE_LITERALS",
        "kind": 5,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "description": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "peekOfCode": "INVALID_UNDERSCORE_LITERALS = [\n    # Trailing underscores:\n    '0_',\n    '42_',\n    '1.4j_',\n    '0x_',\n    '0b1_',\n    '0xf_',\n    '0o5_',\n    '0 if 1_Else 1',",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.python3.8_grammar",
        "documentation": {}
    },
    {
        "label": "set_password",
        "kind": 2,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "description": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "peekOfCode": "def set_password(args):\n\tpassword = args.password\n\twhile not password  :\n\t\tpassword1 = getpass(\"\" if args.quiet else \"Provide password: \")\n\t\tpassword_repeat = getpass(\"\" if args.quiet else \"Repeat password:  \")\n\t\tif password1 != password_repeat:\n\t\t\tprint(\"Passwords do not match, try again\")\n\t\telif len(password1) < 4:\n\t\t\tprint(\"Please provide at least 4 characters\")\n\t\telse:",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "description": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "peekOfCode": "def main(argv):\n\tparser = argparse.ArgumentParser(argv[0])\n\tsubparsers = parser.add_subparsers()\n\tparser_password = subparsers.add_parser('password', help='sets a password for your notebook server')\n\tparser_password.add_argument(\"password\", help=\"password to set, if not given, a password will be queried for (NOTE: this may not be safe)\",\n\t\t\tnargs=\"?\")\n\tparser_password.add_argument(\"--quiet\", help=\"suppress messages\", action=\"store_true\")\n\tparser_password.set_defaults(function=set_password)\n\targs = parser.parse_args(argv[1:])\n\targs.function(args)",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "documentation": {}
    },
    {
        "label": "\tpassword",
        "kind": 5,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "description": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "peekOfCode": "\tpassword = args.password\n\twhile not password  :\n\t\tpassword1 = getpass(\"\" if args.quiet else \"Provide password: \")\n\t\tpassword_repeat = getpass(\"\" if args.quiet else \"Repeat password:  \")\n\t\tif password1 != password_repeat:\n\t\t\tprint(\"Passwords do not match, try again\")\n\t\telif len(password1) < 4:\n\t\t\tprint(\"Please provide at least 4 characters\")\n\t\telse:\n\t\t\tpassword = password1",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "documentation": {}
    },
    {
        "label": "\t\tpassword1",
        "kind": 5,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "description": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "peekOfCode": "\t\tpassword1 = getpass(\"\" if args.quiet else \"Provide password: \")\n\t\tpassword_repeat = getpass(\"\" if args.quiet else \"Repeat password:  \")\n\t\tif password1 != password_repeat:\n\t\t\tprint(\"Passwords do not match, try again\")\n\t\telif len(password1) < 4:\n\t\t\tprint(\"Please provide at least 4 characters\")\n\t\telse:\n\t\t\tpassword = password1\n\tpassword_hash = passwd(password)\n\tcfg = BaseJSONConfigManager(config_dir=jupyter_config_dir())",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "documentation": {}
    },
    {
        "label": "\t\tpassword_repeat",
        "kind": 5,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "description": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "peekOfCode": "\t\tpassword_repeat = getpass(\"\" if args.quiet else \"Repeat password:  \")\n\t\tif password1 != password_repeat:\n\t\t\tprint(\"Passwords do not match, try again\")\n\t\telif len(password1) < 4:\n\t\t\tprint(\"Please provide at least 4 characters\")\n\t\telse:\n\t\t\tpassword = password1\n\tpassword_hash = passwd(password)\n\tcfg = BaseJSONConfigManager(config_dir=jupyter_config_dir())\n\tcfg.update('jupyter_notebook_config', {",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "documentation": {}
    },
    {
        "label": "\t\t\tpassword",
        "kind": 5,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "description": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "peekOfCode": "\t\t\tpassword = password1\n\tpassword_hash = passwd(password)\n\tcfg = BaseJSONConfigManager(config_dir=jupyter_config_dir())\n\tcfg.update('jupyter_notebook_config', {\n\t\t'NotebookApp': {\n\t\t\t'password': password_hash,\n\t\t}\n\t})\n\tif not args.quiet:\n\t\tprint(\"password stored in config dir: %s\" % jupyter_config_dir())",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "documentation": {}
    },
    {
        "label": "\tpassword_hash",
        "kind": 5,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "description": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "peekOfCode": "\tpassword_hash = passwd(password)\n\tcfg = BaseJSONConfigManager(config_dir=jupyter_config_dir())\n\tcfg.update('jupyter_notebook_config', {\n\t\t'NotebookApp': {\n\t\t\t'password': password_hash,\n\t\t}\n\t})\n\tif not args.quiet:\n\t\tprint(\"password stored in config dir: %s\" % jupyter_config_dir())\ndef main(argv):",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "documentation": {}
    },
    {
        "label": "\tcfg",
        "kind": 5,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "description": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "peekOfCode": "\tcfg = BaseJSONConfigManager(config_dir=jupyter_config_dir())\n\tcfg.update('jupyter_notebook_config', {\n\t\t'NotebookApp': {\n\t\t\t'password': password_hash,\n\t\t}\n\t})\n\tif not args.quiet:\n\t\tprint(\"password stored in config dir: %s\" % jupyter_config_dir())\ndef main(argv):\n\tparser = argparse.ArgumentParser(argv[0])",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "documentation": {}
    },
    {
        "label": "\tparser",
        "kind": 5,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "description": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "peekOfCode": "\tparser = argparse.ArgumentParser(argv[0])\n\tsubparsers = parser.add_subparsers()\n\tparser_password = subparsers.add_parser('password', help='sets a password for your notebook server')\n\tparser_password.add_argument(\"password\", help=\"password to set, if not given, a password will be queried for (NOTE: this may not be safe)\",\n\t\t\tnargs=\"?\")\n\tparser_password.add_argument(\"--quiet\", help=\"suppress messages\", action=\"store_true\")\n\tparser_password.set_defaults(function=set_password)\n\targs = parser.parse_args(argv[1:])\n\targs.function(args)",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "documentation": {}
    },
    {
        "label": "\tsubparsers",
        "kind": 5,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "description": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "peekOfCode": "\tsubparsers = parser.add_subparsers()\n\tparser_password = subparsers.add_parser('password', help='sets a password for your notebook server')\n\tparser_password.add_argument(\"password\", help=\"password to set, if not given, a password will be queried for (NOTE: this may not be safe)\",\n\t\t\tnargs=\"?\")\n\tparser_password.add_argument(\"--quiet\", help=\"suppress messages\", action=\"store_true\")\n\tparser_password.set_defaults(function=set_password)\n\targs = parser.parse_args(argv[1:])\n\targs.function(args)",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "documentation": {}
    },
    {
        "label": "\tparser_password",
        "kind": 5,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "description": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "peekOfCode": "\tparser_password = subparsers.add_parser('password', help='sets a password for your notebook server')\n\tparser_password.add_argument(\"password\", help=\"password to set, if not given, a password will be queried for (NOTE: this may not be safe)\",\n\t\t\tnargs=\"?\")\n\tparser_password.add_argument(\"--quiet\", help=\"suppress messages\", action=\"store_true\")\n\tparser_password.set_defaults(function=set_password)\n\targs = parser.parse_args(argv[1:])\n\targs.function(args)",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "documentation": {}
    },
    {
        "label": "\targs",
        "kind": 5,
        "importPath": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "description": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "peekOfCode": "\targs = parser.parse_args(argv[1:])\n\targs.function(args)",
        "detail": "tree-sitter-languages.tree-sitter-python.examples.tabs",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "tree-sitter-languages.tree-sitter-python.test.highlight.parameters",
        "description": "tree-sitter-languages.tree-sitter-python.test.highlight.parameters",
        "peekOfCode": "def g(h, i, /, j, *, k=100, **kwarg):\n    #       ^ operator\n    #             ^ operator\n    pass",
        "detail": "tree-sitter-languages.tree-sitter-python.test.highlight.parameters",
        "documentation": {}
    },
    {
        "label": "match",
        "kind": 5,
        "importPath": "tree-sitter-languages.tree-sitter-python.test.highlight.pattern_matching",
        "description": "tree-sitter-languages.tree-sitter-python.test.highlight.pattern_matching",
        "peekOfCode": "match = 2\n#   ^ variable\nmatch, a = 2, 3\n#   ^ variable\nmatch: int = secret\n#   ^ variable\nx, match: str = 2, \"hey, what's up?\"\n# <- variable\n#   ^ variable\nif match := re.fullmatch(r\"(-)?(\\d+:)?\\d?\\d:\\d\\d(\\.\\d*)?\", time, flags=re.ASCII):",
        "detail": "tree-sitter-languages.tree-sitter-python.test.highlight.pattern_matching",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.test.tags.main",
        "description": "tree-sitter-languages.tree-sitter-python.test.tags.main",
        "peekOfCode": "class MyClass:\n  #    ^ definition.class\n  def hello():\n    #  ^ definition.function\n    print \"hello from MyClass\"\nMyClass.hello()\n#        ^ reference.call\ndef main():\n  #  ^ definition.function\n  print \"Hello, world!\"",
        "detail": "tree-sitter-languages.tree-sitter-python.test.tags.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tree-sitter-languages.tree-sitter-python.test.tags.main",
        "description": "tree-sitter-languages.tree-sitter-python.test.tags.main",
        "peekOfCode": "def main():\n  #  ^ definition.function\n  print \"Hello, world!\"\nmain()\n# <- reference.call",
        "detail": "tree-sitter-languages.tree-sitter-python.test.tags.main",
        "documentation": {}
    },
    {
        "label": "Build",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.setup",
        "description": "tree-sitter-languages.tree-sitter-python.setup",
        "peekOfCode": "class Build(build):\n    def run(self):\n        if isdir(\"queries\"):\n            dest = join(self.build_lib, \"tree_sitter_python\", \"queries\")\n            self.copy_tree(\"queries\", dest)\n        super().run()\nclass BdistWheel(bdist_wheel):\n    def get_tag(self):\n        python, abi, platform = super().get_tag()\n        if python.startswith(\"cp\"):",
        "detail": "tree-sitter-languages.tree-sitter-python.setup",
        "documentation": {}
    },
    {
        "label": "BdistWheel",
        "kind": 6,
        "importPath": "tree-sitter-languages.tree-sitter-python.setup",
        "description": "tree-sitter-languages.tree-sitter-python.setup",
        "peekOfCode": "class BdistWheel(bdist_wheel):\n    def get_tag(self):\n        python, abi, platform = super().get_tag()\n        if python.startswith(\"cp\"):\n            python, abi = \"cp39\", \"abi3\"\n        return python, abi, platform\nsetup(\n    packages=find_packages(\"bindings/python\"),\n    package_dir={\"\": \"bindings/python\"},\n    package_data={",
        "detail": "tree-sitter-languages.tree-sitter-python.setup",
        "documentation": {}
    },
    {
        "label": "get_ast_structure",
        "kind": 2,
        "importPath": "ast_parser",
        "description": "ast_parser",
        "peekOfCode": "def get_ast_structure(code):\n    # Returns AST structure, ignoring variable names, function names, and argument names. \n    try:\n        tree = ast.parse(code)\n        for node in ast.walk(tree):\n            # Ignore function name\n            if isinstance(node, ast.FunctionDef):\n                node.name = \"FUNC\"\n                for arg in node.args.args:\n                    arg.arg = \"VAR\"  # Replace argument names with VAR",
        "detail": "ast_parser",
        "documentation": {}
    },
    {
        "label": "CFGGenerator",
        "kind": 6,
        "importPath": "cfg_generator",
        "description": "cfg_generator",
        "peekOfCode": "class CFGGenerator(ast.NodeVisitor):\n    def __init__(self):\n        self.graph = nx.DiGraph()\n        self.current_node = 0\n        self.counter = 0\n    def add_node(self, label):\n        self.counter += 1\n        self.graph.add_node(self.counter, label=label)\n        if self.current_node != 0:\n            self.graph.add_edge(self.current_node, self.counter)",
        "detail": "cfg_generator",
        "documentation": {}
    },
    {
        "label": "generate_cfg",
        "kind": 2,
        "importPath": "cfg_generator",
        "description": "cfg_generator",
        "peekOfCode": "def generate_cfg(code):\n    try:\n        tree = ast.parse(code)\n        cfg_gen = CFGGenerator()\n        cfg_gen.visit(tree)\n        return cfg_gen.graph\n    except Exception as e:\n        return f\"Error generating CFG: {str(e)}\"",
        "detail": "cfg_generator",
        "documentation": {}
    },
    {
        "label": "matrix_multiply",
        "kind": 2,
        "importPath": "code1",
        "description": "code1",
        "peekOfCode": "def matrix_multiply(A, B):\n    \"\"\"Performs matrix multiplication with basic loops.\"\"\"\n    try:\n        # ✅ Initialize result matrix with zeros\n        result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))]\n        # ✅ Matrix multiplication logic\n        for i in range(len(A)):\n            for j in range(len(B[0])):\n                for k in range(len(B)):\n                    result[i][j] += A[i][k] * B[k][j]",
        "detail": "code1",
        "documentation": {}
    },
    {
        "label": "matrix_multiply",
        "kind": 2,
        "importPath": "code2",
        "description": "code2",
        "peekOfCode": "def matrix_multiply(A, B):\n    \"\"\"Performs matrix multiplication of A and B.\"\"\"\n    try:\n        # Initialize the result matrix with zeros\n        result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))]\n        # Matrix multiplication logic\n        for i in range(len(A)):\n            for j in range(len(B[0])):\n                for k in range(len(B)):\n                    result[i][j] += A[i][k] * B[k][j]",
        "detail": "code2",
        "documentation": {}
    },
    {
        "label": "run_test_cases",
        "kind": 2,
        "importPath": "code2",
        "description": "code2",
        "peekOfCode": "def run_test_cases():\n    \"\"\"Runs test cases for matrix_multiply.\"\"\"\n    # Test Case 1: Basic 2x2 matrix multiplication\n    A1 = [[1, 2], [3, 4]]\n    B1 = [[5, 6], [7, 8]]\n    expected1 = [[19, 22], [43, 50]]\n    result1 = matrix_multiply(A1, B1)\n    if result1 == expected1:\n        print(\"✅ Test Case 1 Passed!\")\n    else:",
        "detail": "code2",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "codeforces_fetch",
        "description": "codeforces_fetch",
        "peekOfCode": "url = \"https://codeforces.com/api/user.status?handle=tourist\"\nresponse = requests.get(url)\ndata = response.json()\n# Extract problem names and programming languages\nfor submission in data['result'][:10]:  # Limit to 10 submissions\n    print(f\"Problem: {submission['problem']['name']} | Language: {submission['programmingLanguage']}\")",
        "detail": "codeforces_fetch",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "codeforces_fetch",
        "description": "codeforces_fetch",
        "peekOfCode": "response = requests.get(url)\ndata = response.json()\n# Extract problem names and programming languages\nfor submission in data['result'][:10]:  # Limit to 10 submissions\n    print(f\"Problem: {submission['problem']['name']} | Language: {submission['programmingLanguage']}\")",
        "detail": "codeforces_fetch",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "codeforces_fetch",
        "description": "codeforces_fetch",
        "peekOfCode": "data = response.json()\n# Extract problem names and programming languages\nfor submission in data['result'][:10]:  # Limit to 10 submissions\n    print(f\"Problem: {submission['problem']['name']} | Language: {submission['programmingLanguage']}\")",
        "detail": "codeforces_fetch",
        "documentation": {}
    },
    {
        "label": "is_plagiarized",
        "kind": 2,
        "importPath": "compare",
        "description": "compare",
        "peekOfCode": "def is_plagiarized(similarity_score, threshold=0.7):\n    \"\"\"Returns True if similarity score is above threshold.\"\"\"\n    return similarity_score >= threshold\ndef hash_similarity(hash1, hash2):\n    \"\"\"Returns similarity ratio between two hashes.\"\"\"\n    return SequenceMatcher(None, hash1, hash2).ratio()\ndef compare_cfg(code1, code2):\n    \"\"\"Compare Control Flow Graphs (CFGs) for two code snippets.\"\"\"\n    cfg1 = generate_cfg(code1)\n    cfg2 = generate_cfg(code2)",
        "detail": "compare",
        "documentation": {}
    },
    {
        "label": "hash_similarity",
        "kind": 2,
        "importPath": "compare",
        "description": "compare",
        "peekOfCode": "def hash_similarity(hash1, hash2):\n    \"\"\"Returns similarity ratio between two hashes.\"\"\"\n    return SequenceMatcher(None, hash1, hash2).ratio()\ndef compare_cfg(code1, code2):\n    \"\"\"Compare Control Flow Graphs (CFGs) for two code snippets.\"\"\"\n    cfg1 = generate_cfg(code1)\n    cfg2 = generate_cfg(code2)\n    # Check for errors\n    if isinstance(cfg1, str) or isinstance(cfg2, str):\n        return False",
        "detail": "compare",
        "documentation": {}
    },
    {
        "label": "compare_cfg",
        "kind": 2,
        "importPath": "compare",
        "description": "compare",
        "peekOfCode": "def compare_cfg(code1, code2):\n    \"\"\"Compare Control Flow Graphs (CFGs) for two code snippets.\"\"\"\n    cfg1 = generate_cfg(code1)\n    cfg2 = generate_cfg(code2)\n    # Check for errors\n    if isinstance(cfg1, str) or isinstance(cfg2, str):\n        return False\n    # Check for CFG isomorphism\n    return nx.is_isomorphic(cfg1, cfg2)\ndef calculate_synthetic_similarity(code1, code2):",
        "detail": "compare",
        "documentation": {}
    },
    {
        "label": "calculate_synthetic_similarity",
        "kind": 2,
        "importPath": "compare",
        "description": "compare",
        "peekOfCode": "def calculate_synthetic_similarity(code1, code2):\n    \"\"\"Calculate synthetic similarity by normalizing, tokenizing, and comparing hashes.\"\"\"\n    # Normalization\n    normalized_code1 = normalize_code(code1)\n    normalized_code2 = normalize_code(code2)\n    normalized_similarity = SequenceMatcher(None, normalized_code1, normalized_code2).ratio()\n    # Tokenization\n    tokens1 = tokenize_code(code1)\n    tokens2 = tokenize_code(code2)\n    token_match = tokens1 == tokens2",
        "detail": "compare",
        "documentation": {}
    },
    {
        "label": "calculate_structural_similarity",
        "kind": 2,
        "importPath": "compare",
        "description": "compare",
        "peekOfCode": "def calculate_structural_similarity(code1, code2):\n    \"\"\"Calculate structural similarity using AST and CFG.\"\"\"\n    # AST comparison\n    ast_match = get_ast_structure(code1) == get_ast_structure(code2)\n    # CFG comparison\n    cfg_match = compare_cfg(code1, code2)\n    # Weighted structural score\n    structural_similarity = 0.5 * int(ast_match) + 0.5 * int(cfg_match)\n    return round(structural_similarity, 4)\ndef run_test_cases(code, test_cases):",
        "detail": "compare",
        "documentation": {}
    },
    {
        "label": "run_test_cases",
        "kind": 2,
        "importPath": "compare",
        "description": "compare",
        "peekOfCode": "def run_test_cases(code, test_cases):\n    \"\"\"Executes the code with given test cases and returns the results.\"\"\"\n    results = []\n    for case in test_cases:\n        inputs, expected_output = case[\"input\"], case[\"expected_output\"]\n        try:\n            # Create a function wrapper dynamically and execute it\n            exec_globals = {}\n            exec(code, exec_globals)\n            func_name = list(exec_globals.keys())[0]  # Get the first defined function",
        "detail": "compare",
        "documentation": {}
    },
    {
        "label": "calculate_behavioral_similarity",
        "kind": 2,
        "importPath": "compare",
        "description": "compare",
        "peekOfCode": "def calculate_behavioral_similarity(code1, code2, test_cases):\n    \"\"\"Compare code behavior based on input-output similarity and execution time.\"\"\"\n    results1 = run_test_cases(code1, test_cases)\n    results2 = run_test_cases(code2, test_cases)\n    matching_outputs = 0\n    total_cases = len(test_cases)\n    time_diff_sum = 0\n    for (output1, time1), (output2, time2) in zip(results1, results2):\n        if output1 == output2:\n            matching_outputs += 1",
        "detail": "compare",
        "documentation": {}
    },
    {
        "label": "compare_codes",
        "kind": 2,
        "importPath": "compare",
        "description": "compare",
        "peekOfCode": "def compare_codes(code1, code2, test_cases=None):\n    \"\"\"Compares two codes using multiple techniques and returns similarity scores.\"\"\"\n    code1, code2 = preprocess_code(code1), preprocess_code(code2)\n    # Calculate all similarities\n    synthetic_similarity = calculate_synthetic_similarity(code1, code2)\n    structural_similarity = calculate_structural_similarity(code1, code2)\n    # If no test cases are provided, set behavioral similarity to 0\n    if test_cases:\n        behavioral_similarity = calculate_behavioral_similarity(code1, code2, test_cases)\n    else:",
        "detail": "compare",
        "documentation": {}
    },
    {
        "label": "generate_plagiarized_code",
        "kind": 2,
        "importPath": "generate_plagiarized",
        "description": "generate_plagiarized",
        "peekOfCode": "def generate_plagiarized_code(original_code):\n    prompt = f\"Rewrite the following code with different variable names, loop structures, and formatting:\\n\\n{original_code}\"\n    response = client.chat.completions.create(\n        model=\"gpt-4\",\n        messages=[{\"role\": \"user\", \"content\": prompt}]\n    )\n    return response.choices[0].message.content",
        "detail": "generate_plagiarized",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "generate_plagiarized",
        "description": "generate_plagiarized",
        "peekOfCode": "client = OpenAI(api_key=\"sk-QpabguAmdr7EzfzEeXe7TxBvByOkulXVpq_vlEM0llT3BlbkFJUkuinrIuRV50If9G-ViPU5vrRUUqIJiQcvQqVzjWIA\")\ndef generate_plagiarized_code(original_code):\n    prompt = f\"Rewrite the following code with different variable names, loop structures, and formatting:\\n\\n{original_code}\"\n    response = client.chat.completions.create(\n        model=\"gpt-4\",\n        messages=[{\"role\": \"user\", \"content\": prompt}]\n    )\n    return response.choices[0].message.content",
        "detail": "generate_plagiarized",
        "documentation": {}
    },
    {
        "label": "calculate_final_score",
        "kind": 2,
        "importPath": "generate_report",
        "description": "generate_report",
        "peekOfCode": "def calculate_final_score(results, weights=None):\n    \"\"\"Calculates the final similarity score by aggregating weighted scores.\"\"\"\n    if weights is None:\n        # Default weights for all similarity techniques\n        weights = {\n            \"AST Match\": 0.2,\n            \"CFG Match\": 0.15,\n            \"Token Match\": 0.15,\n            \"Text Similarity Score\": 0.1,\n            \"Hash Match\": 0.1,",
        "detail": "generate_report",
        "documentation": {}
    },
    {
        "label": "make_plagiarism_decision",
        "kind": 2,
        "importPath": "generate_report",
        "description": "generate_report",
        "peekOfCode": "def make_plagiarism_decision(final_score, threshold=0.7):\n    \"\"\"Decides whether the code is plagiarized based on the final score.\"\"\"\n    return \"Plagiarized\" if final_score >= threshold else \"Original\"\ndef generate_report(results, final_score, decision, file_path=\"plagiarism_report.json\"):\n    \"\"\"Generates a plagiarism report and saves it to a file.\"\"\"\n    report_data = {\n        \"AST Match\": results[\"AST Match\"],\n        \"CFG Match\": results[\"CFG Match\"],\n        \"Token Match\": results[\"Token Match\"],\n        \"Text Similarity Score\": results[\"Text Similarity Score\"],",
        "detail": "generate_report",
        "documentation": {}
    },
    {
        "label": "generate_report",
        "kind": 2,
        "importPath": "generate_report",
        "description": "generate_report",
        "peekOfCode": "def generate_report(results, final_score, decision, file_path=\"plagiarism_report.json\"):\n    \"\"\"Generates a plagiarism report and saves it to a file.\"\"\"\n    report_data = {\n        \"AST Match\": results[\"AST Match\"],\n        \"CFG Match\": results[\"CFG Match\"],\n        \"Token Match\": results[\"Token Match\"],\n        \"Text Similarity Score\": results[\"Text Similarity Score\"],\n        \"Hash Match\": results[\"Hash Match\"],\n        \"Synthetic Similarity\": results[\"Synthetic Similarity\"],\n        \"Structural Similarity\": results[\"Structural Similarity\"],",
        "detail": "generate_report",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "generate_report",
        "description": "generate_report",
        "peekOfCode": "sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')\ndef calculate_final_score(results, weights=None):\n    \"\"\"Calculates the final similarity score by aggregating weighted scores.\"\"\"\n    if weights is None:\n        # Default weights for all similarity techniques\n        weights = {\n            \"AST Match\": 0.2,\n            \"CFG Match\": 0.15,\n            \"Token Match\": 0.15,\n            \"Text Similarity Score\": 0.1,",
        "detail": "generate_report",
        "documentation": {}
    },
    {
        "label": "fetch_code_from_gfg",
        "kind": 2,
        "importPath": "gfg_fetch",
        "description": "gfg_fetch",
        "peekOfCode": "def fetch_code_from_gfg(problem_url=\"https://www.geeksforgeeks.org/reverse-an-array/\"):\n    \"\"\"Fetch code from a GeeksforGeeks article.\"\"\"\n    response = requests.get(problem_url)\n    if response.status_code != 200:\n        return \"\"\n    soup = BeautifulSoup(response.text, 'html.parser')\n    code_blocks = soup.find_all(\"pre\")\n    # Concatenate all code blocks for comparison\n    extracted_code = \"\\n\".join(block.text.strip() for block in code_blocks)\n    return extracted_code",
        "detail": "gfg_fetch",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "github_fetch",
        "description": "github_fetch",
        "peekOfCode": "url = \"https://api.github.com/search/repositories?q=language:python&sort=stars\"\nheaders = {\n    \"Authorization\": \"token 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\"\n}\nresponse = requests.get(url, headers=headers)\n# Check HTTP response status\nif response.status_code != 200:\n    print(f\"❌ Error: Unable to fetch data. HTTP Status: {response.status_code}\")\n    print(f\"⚠️ Response: {response.json()}\")\n    exit()",
        "detail": "github_fetch",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "github_fetch",
        "description": "github_fetch",
        "peekOfCode": "headers = {\n    \"Authorization\": \"token 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\"\n}\nresponse = requests.get(url, headers=headers)\n# Check HTTP response status\nif response.status_code != 200:\n    print(f\"❌ Error: Unable to fetch data. HTTP Status: {response.status_code}\")\n    print(f\"⚠️ Response: {response.json()}\")\n    exit()\n# Parse JSON response",
        "detail": "github_fetch",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "github_fetch",
        "description": "github_fetch",
        "peekOfCode": "response = requests.get(url, headers=headers)\n# Check HTTP response status\nif response.status_code != 200:\n    print(f\"❌ Error: Unable to fetch data. HTTP Status: {response.status_code}\")\n    print(f\"⚠️ Response: {response.json()}\")\n    exit()\n# Parse JSON response\ndata = response.json()\n# Check if 'items' is in the response\nif \"items\" not in data:",
        "detail": "github_fetch",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "github_fetch",
        "description": "github_fetch",
        "peekOfCode": "data = response.json()\n# Check if 'items' is in the response\nif \"items\" not in data:\n    print(\"⚠️ No 'items' key found in response. Check your GitHub API token or query.\")\n    print(f\"💡 Response: {json.dumps(data, indent=2)}\")\n    exit()\n# Extract repo URLs\nrepo_urls = [repo[\"html_url\"] for repo in data[\"items\"]]\n# Save to file\nwith open(\"github_repos.txt\", \"w\") as file:",
        "detail": "github_fetch",
        "documentation": {}
    },
    {
        "label": "repo_urls",
        "kind": 5,
        "importPath": "github_fetch",
        "description": "github_fetch",
        "peekOfCode": "repo_urls = [repo[\"html_url\"] for repo in data[\"items\"]]\n# Save to file\nwith open(\"github_repos.txt\", \"w\") as file:\n    for url in repo_urls:\n        file.write(url + \"\\n\")\nprint(f\"✅ Fetched {len(repo_urls)} repository URLs saved to 'github_repos.txt'\")",
        "detail": "github_fetch",
        "documentation": {}
    },
    {
        "label": "hash_code",
        "kind": 2,
        "importPath": "hash_similarity",
        "description": "hash_similarity",
        "peekOfCode": "def hash_code(code):\n    \"\"\" Returns the hash fingerprint of the code. \"\"\"\n    return hashlib.sha256(code.encode()).hexdigest()",
        "detail": "hash_similarity",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "result = compare_codes(code1, code2)\n# Print the similarity results\nprint(\"🔎 Code Comparison Results:\\n\", result)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "normalize_code",
        "kind": 2,
        "importPath": "normalize",
        "description": "normalize",
        "peekOfCode": "def normalize_code(code):\n    \"\"\" Replaces variable names, numbers, and function names with placeholders. \"\"\"\n    code = re.sub(r'\\b[a-zA-Z_][a-zA-Z0-9_]*\\b', 'VAR', code)  # Replace all variable names\n    code = re.sub(r'\\b\\d+\\b', 'NUM', code)  # Replace numbers\n    return code",
        "detail": "normalize",
        "documentation": {}
    },
    {
        "label": "preprocess_code",
        "kind": 2,
        "importPath": "preprocess",
        "description": "preprocess",
        "peekOfCode": "def preprocess_code(code):\n    \"\"\" Removes comments, extra spaces, and standardizes the code format. \"\"\"\n    code = re.sub(r'#.*', '', code)  # Remove comments\n    code = re.sub(r'\"\"\"[\\s\\S]*?\"\"\"', '', code)  # Remove docstrings\n    code = re.sub(r\"'''[\\s\\S]*?'''\", '', code)  # Remove multi-line docstrings\n    code = re.sub(r'\\s+', ' ', code).strip()  # Normalize spaces\n    return code",
        "detail": "preprocess",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "stackoverflow_scraper",
        "description": "stackoverflow_scraper",
        "peekOfCode": "url = \"https://stackoverflow.com/questions/tagged/python\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n# Extract question titles\nfor post in soup.find_all(\"a\", class_=\"question-hyperlink\"):\n    print(post.text)",
        "detail": "stackoverflow_scraper",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "stackoverflow_scraper",
        "description": "stackoverflow_scraper",
        "peekOfCode": "response = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n# Extract question titles\nfor post in soup.find_all(\"a\", class_=\"question-hyperlink\"):\n    print(post.text)",
        "detail": "stackoverflow_scraper",
        "documentation": {}
    },
    {
        "label": "soup",
        "kind": 5,
        "importPath": "stackoverflow_scraper",
        "description": "stackoverflow_scraper",
        "peekOfCode": "soup = BeautifulSoup(response.text, \"html.parser\")\n# Extract question titles\nfor post in soup.find_all(\"a\", class_=\"question-hyperlink\"):\n    print(post.text)",
        "detail": "stackoverflow_scraper",
        "documentation": {}
    },
    {
        "label": "tokenize_code",
        "kind": 2,
        "importPath": "tokenizer",
        "description": "tokenizer",
        "peekOfCode": "def tokenize_code(code):\n    \"\"\" Tokenizes the given code and removes variable names. \"\"\"\n    try:\n        tokens = []\n        for tok in tokenize.tokenize(BytesIO(code.encode('utf-8')).readline):\n            if tok.type == tokenize.NAME:  \n                tokens.append(\"VAR\")  # Replace all variable names with VAR\n            elif tok.type == tokenize.NUMBER:\n                tokens.append(\"NUM\")  # Replace all numbers with NUM\n            elif tok.type == tokenize.STRING:",
        "detail": "tokenizer",
        "documentation": {}
    },
    {
        "label": "visualize_synthetic_vs_structural",
        "kind": 2,
        "importPath": "visualizer",
        "description": "visualizer",
        "peekOfCode": "def visualize_synthetic_vs_structural(synthetic_similarity, structural_similarity, output_path=\"synthetic_vs_structural.png\"):\n    \"\"\"Visualizes a bar chart comparing Synthetic and Structural Similarity.\"\"\"\n    categories = [\"Synthetic Similarity\", \"Structural Similarity\"]\n    values = [synthetic_similarity, structural_similarity]\n    # Create a bar chart\n    plt.figure(figsize=(5, 5))\n    plt.bar(categories, values, color=[\"#3498db\", \"#e74c3c\"])  # Blue & Red colors\n    plt.ylim(0, 1)  # Similarity values range from 0 to 1\n    plt.ylabel(\"Similarity Score\")\n    plt.title(\"Comparison: Synthetic vs Structural Similarity\")",
        "detail": "visualizer",
        "documentation": {}
    },
    {
        "label": "visualize_similarity",
        "kind": 2,
        "importPath": "visualizer",
        "description": "visualizer",
        "peekOfCode": "def visualize_similarity(results, final_score, output_path=\"similarity_report.png\"):\n    \"\"\"Visualizes similarity results as a bar chart and saves it.\"\"\"\n    # Categories and corresponding values\n    categories = [\n        \"AST Match\",\n        \"CFG Match\",\n        \"Token Match\",\n        \"Text Similarity Score\",\n        \"Hash Match\",\n        \"Synthetic Similarity\",",
        "detail": "visualizer",
        "documentation": {}
    },
    {
        "label": "visualize_synthetic_similarity",
        "kind": 2,
        "importPath": "visualizer",
        "description": "visualizer",
        "peekOfCode": "def visualize_synthetic_similarity(synthetic_score, output_path=\"synthetic_similarity.png\"):\n    \"\"\"Visualizes synthetic similarity as a bar chart.\"\"\"\n    plt.figure(figsize=(6, 4))\n    plt.bar([\"Synthetic Similarity\"], [synthetic_score], color=\"#2196f3\")\n    plt.ylabel(\"Score\")\n    plt.title(\"Synthetic Similarity Analysis\")\n    plt.ylim(0, 1)\n    # Save as PNG\n    plt.savefig(output_path, format=\"png\", dpi=300)\n    print(f\"✅ Synthetic similarity visualization saved as '{output_path}'\")",
        "detail": "visualizer",
        "documentation": {}
    },
    {
        "label": "visualize_structural_similarity",
        "kind": 2,
        "importPath": "visualizer",
        "description": "visualizer",
        "peekOfCode": "def visualize_structural_similarity(structural_score, output_path=\"structural_similarity.png\"):\n    \"\"\"Visualizes structural similarity as a bar chart.\"\"\"\n    plt.figure(figsize=(6, 4))\n    plt.bar([\"Structural Similarity\"], [structural_score], color=\"#4caf50\")\n    plt.ylabel(\"Score\")\n    plt.title(\"Structural Similarity Analysis\")\n    plt.ylim(0, 1)\n    # Save as PNG\n    plt.savefig(output_path, format=\"png\", dpi=300)\n    print(f\"✅ Structural similarity visualization saved as '{output_path}'\")",
        "detail": "visualizer",
        "documentation": {}
    },
    {
        "label": "visualize_behavioral_similarity",
        "kind": 2,
        "importPath": "visualizer",
        "description": "visualizer",
        "peekOfCode": "def visualize_behavioral_similarity(behavioral_similarity, output_path=\"behavioral_similarity.png\"):\n    \"\"\"Visualizes the behavioral similarity score.\"\"\"\n    categories = [\"Behavioral Similarity\"]\n    values = [behavioral_similarity]\n    plt.figure(figsize=(6, 5))\n    plt.bar(categories, values, color=[\"#8e44ad\"])\n    plt.ylim(0, 1)\n    plt.ylabel(\"Similarity Score\")\n    plt.title(\"Behavioral Similarity Analysis\")\n    plt.savefig(output_path, format=\"png\", dpi=300)",
        "detail": "visualizer",
        "documentation": {}
    },
    {
        "label": "visualize_synthetic_vs_structural_vs_behavioral",
        "kind": 2,
        "importPath": "visualizer",
        "description": "visualizer",
        "peekOfCode": "def visualize_synthetic_vs_structural_vs_behavioral(synthetic_similarity, structural_similarity, behavioral_similarity, output_path=\"synthetic_structural_behavioral.png\"):\n    \"\"\"Visualizes comparison of Synthetic, Structural, and Behavioral Similarities.\"\"\"\n    categories = [\"Synthetic\", \"Structural\", \"Behavioral\"]\n    values = [synthetic_similarity, structural_similarity, behavioral_similarity]\n    plt.figure(figsize=(8, 5))\n    plt.bar(categories, values, color=[\"#3498db\", \"#e74c3c\", \"#8e44ad\"])\n    plt.ylim(0, 1)\n    plt.ylabel(\"Similarity Score\")\n    plt.title(\"Comparison: Synthetic, Structural & Behavioral Similarity\")\n    plt.savefig(output_path, format=\"png\", dpi=300)",
        "detail": "visualizer",
        "documentation": {}
    }
]